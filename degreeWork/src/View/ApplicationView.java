package View;

import Controller.FrameHandler;
import Controller.GraphHandler;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import jxl.read.biff.BiffException;
import jxl.write.WriteException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.TimeSeriesCollection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author kalgus
 */
public class ApplicationView extends javax.swing.JFrame {

    /**
     * Creates new NewJFrame
     *
     * @throws jxl.read.biff.BiffException
     * @throws jxl.write.WriteException
     * @throws java.io.IOException
     */
    public ApplicationView() throws BiffException, WriteException, IOException {
        initComponents();
        timeSlider.setEnabled(false);
        KeyStroke k = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
        int w = JComponent.WHEN_IN_FOCUSED_WINDOW;
        this.getRootPane().registerKeyboardAction(e -> System.exit(0), k, w);
        this.setLocation(400, 200);

        warningMenuItem.setMnemonic(KeyEvent.VK_W);
        warningMenuItem.setAccelerator(KeyStroke.getKeyStroke(
                KeyEvent.VK_W, ActionEvent.ALT_MASK));

        timeGraphMenuItem.setMnemonic(KeyEvent.VK_T);
        timeGraphMenuItem.setAccelerator(KeyStroke.getKeyStroke(
                KeyEvent.VK_T, ActionEvent.ALT_MASK));

        roomGraphMenuItem.setMnemonic(KeyEvent.VK_R);
        roomGraphMenuItem.setAccelerator(KeyStroke.getKeyStroke(
                KeyEvent.VK_R, ActionEvent.ALT_MASK));

        JRootPane pane = SwingUtilities.getRootPane(searchButton);
        pane.setDefaultButton(searchButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pictureLabel = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        timeSlider = new javax.swing.JSlider();
        martinCheckBox = new javax.swing.JCheckBox();
        olleCheckBox = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuBar = new javax.swing.JMenu();
        warningMenuItem = new javax.swing.JMenuItem();
        timeGraphMenuItem = new javax.swing.JMenuItem();
        roomGraphMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Welcome!");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        pictureLabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\quicklyJava_WithFrame\\images\\OfficeSpace.png")); // NOI18N
        pictureLabel.setText("jLabel1");

        searchButton.setText("Search");
        searchButton.setToolTipText("Do a search!");
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        searchField.setFont(new java.awt.Font("Verdana", 0, 11)); // NOI18N
        searchField.setText("search");
        searchField.setToolTipText("search word");
        searchField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchFieldMouseClicked(evt);
            }
        });

        timeSlider.setMajorTickSpacing(1);
        timeSlider.setMaximum(17);
        timeSlider.setMinimum(7);
        timeSlider.setMinorTickSpacing(1);
        timeSlider.setPaintLabels(true);
        timeSlider.setPaintTicks(true);
        timeSlider.setValue(7);
        timeSlider.setMajorTickSpacing(10);
        timeSlider.setMinorTickSpacing(1);
        timeSlider.setPaintTicks(true);
        timeSlider.setPaintLabels(true);
        timeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                timeSliderStateChanged(evt);
            }
        });

        martinCheckBox.setText("Martin");
        martinCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                martinCheckBoxActionPerformed(evt);
            }
        });

        olleCheckBox.setText("Olle");
        olleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                olleCheckBoxActionPerformed(evt);
            }
        });

        menuBar.setText("File");

        warningMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.ALT_MASK));
        warningMenuItem.setText("Warnings");
        warningMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warningMenuItemActionPerformed(evt);
            }
        });
        menuBar.add(warningMenuItem);

        timeGraphMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_MASK));
        timeGraphMenuItem.setText("Time Graph");
        timeGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeGraphMenuItemActionPerformed(evt);
            }
        });
        menuBar.add(timeGraphMenuItem);

        roomGraphMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        roomGraphMenuItem.setText("Room Graph");
        roomGraphMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomGraphMenuItemActionPerformed(evt);
            }
        });
        menuBar.add(roomGraphMenuItem);

        jMenuBar1.add(menuBar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton))
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(timeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(martinCheckBox)
                            .addComponent(olleCheckBox)))
                    .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(martinCheckBox)
                        .addGap(2, 2, 2)
                        .addComponent(olleCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pictureLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event for when the search button is pressed. it checks if there is a
     * string inside the text field and if there is it tries to fetch all the
     * information about this person (or other things that can have caused an
     * event.) it also displays this information in a new window.
     *
     * @param evt
     */
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            String text = searchField.getText();
            if (!text.equals("") && !text.equals("search")) {
                JList personalList = new JList(FrameHandler.showPersonalAccess(text).toArray());
                JFrame displayFrame = new JFrame("Result for: " + searchField.getText());
                if (personalList.getModel().getSize() == 0) {
                    JOptionPane.showMessageDialog(displayFrame,
                            "Could not find a result for '" + searchField.getText() + "'",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    JPanel contentPane = new JPanel();
                    contentPane.add(personalList);
                    JScrollPane scrollPane = new JScrollPane(contentPane);
                    displayFrame.add(scrollPane);
                    displayFrame.setVisible(true);
                    displayFrame.pack();

                    KeyStroke k = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
                    int w = JComponent.WHEN_IN_FOCUSED_WINDOW;
                    displayFrame.getRootPane().registerKeyboardAction(e -> displayFrame.dispose(), k, w);
                }
            }

        } catch (IOException | BiffException ex) {
            Logger.getLogger(ApplicationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchFieldMouseClicked
        searchField.setText("");
    }//GEN-LAST:event_searchFieldMouseClicked

    /**
     * Event handles for when the the slider called 'TimeSlider' gets moved
     * (changes value)
     *
     * @param evt
     */
    private void timeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_timeSliderStateChanged
        if (timeSlider.getValue() > 7 && timeSlider.getValue() < 12 && olleCheckBox.isSelected() == true) {
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\olleEnter.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);
        } else if (timeSlider.getValue() > 11 && timeSlider.getValue() < 14 && olleCheckBox.isSelected() == true) {
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\Olle2.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);
        } else if (timeSlider.getValue() > 13 && timeSlider.getValue() < 16 && olleCheckBox.isSelected() == true) {
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\Olle3.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);
        } else if(timeSlider.getValue() >=16 && olleCheckBox.isSelected() == true){
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\OlleExit.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);  
        }  
            else if (timeSlider.getValue() > 8 && timeSlider.getValue() < 13 && martinCheckBox.isSelected() == true) {
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\martinEnter.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);
        } else if (timeSlider.getValue() > 12 && timeSlider.getValue() < 15 && martinCheckBox.isSelected() == true) {
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\Martin2.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);
        } else if (timeSlider.getValue() > 14 && timeSlider.getValue() < 17 && martinCheckBox.isSelected() == true) {
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\Martin3.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);
        } else if (timeSlider.getValue() == 17 && martinCheckBox.isSelected() == true) {
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\MartinExit.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);
        } else {
            String imageName = "C:\\Users\\Kalgus\\Documents\\NetBeansProjects\\degreeWork\\images\\OfficeSpace.png";
            ImageIcon icon = new ImageIcon(imageName);
            icon.getImage().flush();
            pictureLabel.setIcon(icon);
        }
    }//GEN-LAST:event_timeSliderStateChanged

    /**
     * event that happens when the check box called martinCheckBox gets selected
     * or not.
     *
     * @param evt
     */
    private void martinCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_martinCheckBoxActionPerformed
        if (martinCheckBox.isSelected()) {
            timeSlider.setValue(7);
            olleCheckBox.setSelected(false);
            timeSlider.setEnabled(true);
        } else {
            timeSlider.setEnabled(false);
            timeSlider.setValue(7);
        }
    }//GEN-LAST:event_martinCheckBoxActionPerformed

    /**
     * event that happens when the check box called olleCheckBox gets selected
     * or not.
     *
     * @param evt
     */
    private void olleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_olleCheckBoxActionPerformed
        if (olleCheckBox.isSelected()) {
            timeSlider.setValue(7);
            martinCheckBox.setSelected(false);
            timeSlider.setEnabled(true);
        } else {
            timeSlider.setEnabled(false);
            timeSlider.setValue(7);

        }
    }//GEN-LAST:event_olleCheckBoxActionPerformed

    private void warningMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warningMenuItemActionPerformed
        try {
            JList warningList = new JList(FrameHandler.showWarnings().toArray());
            JFrame displayFrame = new JFrame("Warnings");
            JPanel contentPane = new JPanel();
            contentPane.add(warningList);
            JScrollPane scrollPane = new JScrollPane(contentPane);
            displayFrame.add(scrollPane);
            displayFrame.setSize(583, 800);
            displayFrame.setVisible(true);

            KeyStroke k = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
            int w = JComponent.WHEN_IN_FOCUSED_WINDOW;
            displayFrame.getRootPane().registerKeyboardAction(e -> displayFrame.dispose(), k, w);

        } catch (IOException | WriteException | BiffException ex) {
            Logger.getLogger(ApplicationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_warningMenuItemActionPerformed

    private void timeGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeGraphMenuItemActionPerformed
        try {
            TimeSeriesCollection dataset = GraphHandler.getTimeSeries();
            JFreeChart timeChart = ChartFactory.createTimeSeriesChart(
                    "Count",
                    "Date",
                    "Accesses",
                    dataset,
                    true,
                    true,
                    false
            );

            ChartFrame frame = new ChartFrame("Accesses over time", timeChart);
            frame.pack();
            frame.setVisible(true);

            KeyStroke k = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
            int w = JComponent.WHEN_IN_FOCUSED_WINDOW;
            frame.getRootPane().registerKeyboardAction(e -> frame.dispose(), k, w);
        } catch (IOException | BiffException ex) {
            Logger.getLogger(ApplicationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_timeGraphMenuItemActionPerformed

    private void roomGraphMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomGraphMenuItemActionPerformed
        try {
            DefaultCategoryDataset objDataset = GraphHandler.getRoomDataset();
            JFreeChart objChart = ChartFactory.createBarChart(
                    "Room Accesses",
                    "Room name",
                    "Accesses",
                    objDataset,
                    PlotOrientation.VERTICAL,
                    true,
                    true,
                    false
            );

            ChartFrame frame = new ChartFrame("Room Demo", objChart);
            frame.pack();

            KeyStroke k = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
            int w = JComponent.WHEN_IN_FOCUSED_WINDOW;
            frame.getRootPane().registerKeyboardAction(e -> frame.dispose(), k, w);
            frame.setVisible(true);
        } catch (IOException | BiffException ex) {
            Logger.getLogger(ApplicationView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_roomGraphMenuItemActionPerformed

    /**
     * main method that creates the GUI and makes it visible to the user.
     *
     * @param args the command line arguments
     * @throws jxl.write.WriteException
     * @throws jxl.read.biff.BiffException
     */
    public static void main(String args[]) throws WriteException, BiffException {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new ApplicationView().setVisible(true);

                } catch (BiffException | WriteException | IOException ex) {
                    Logger.getLogger(ApplicationView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JCheckBox martinCheckBox;
    private javax.swing.JMenu menuBar;
    private javax.swing.JCheckBox olleCheckBox;
    private javax.swing.JLabel pictureLabel;
    private javax.swing.JMenuItem roomGraphMenuItem;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JMenuItem timeGraphMenuItem;
    private javax.swing.JSlider timeSlider;
    private javax.swing.JMenuItem warningMenuItem;
    // End of variables declaration//GEN-END:variables
}
